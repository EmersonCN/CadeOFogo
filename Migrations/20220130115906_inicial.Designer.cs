// <auto-generated />
using System;
using CadeOFogo.Data;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Metadata;
using Microsoft.EntityFrameworkCore.Migrations;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;

namespace CadeOFogo.Migrations
{
    [DbContext(typeof(ApplicationDbContext))]
    [Migration("20220130115906_inicial")]
    partial class inicial
    {
        protected override void BuildTargetModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("Relational:MaxIdentifierLength", 128)
                .HasAnnotation("ProductVersion", "5.0.5")
                .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

            modelBuilder.Entity("CadeOFogo.Areas.Cadastros.Models.Equipe", b =>
                {
                    b.Property<int>("EquipeId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("ApplicationUserId")
                        .HasColumnType("nvarchar(450)");

                    b.Property<bool>("Ativa")
                        .HasColumnType("bit");

                    b.Property<int>("BatalhaoId")
                        .HasColumnType("int");

                    b.Property<int>("CompanhiaId")
                        .HasColumnType("int");

                    b.Property<string>("EquipeNome")
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("PelotaoId")
                        .HasColumnType("int");

                    b.HasKey("EquipeId");

                    b.HasIndex("ApplicationUserId");

                    b.HasIndex("BatalhaoId");

                    b.HasIndex("CompanhiaId");

                    b.HasIndex("PelotaoId");

                    b.ToTable("Equipes");
                });

            modelBuilder.Entity("CadeOFogo.Models.Inpe.ApplicationUser", b =>
                {
                    b.Property<string>("Id")
                        .HasColumnType("nvarchar(450)");

                    b.Property<int>("AccessFailedCount")
                        .HasColumnType("int");

                    b.Property<string>("ConcurrencyStamp")
                        .IsConcurrencyToken()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Email")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.Property<bool>("EmailConfirmed")
                        .HasColumnType("bit");

                    b.Property<byte[]>("FotoPerfil")
                        .HasColumnType("varbinary(max)");

                    b.Property<bool>("LockoutEnabled")
                        .HasColumnType("bit");

                    b.Property<DateTimeOffset?>("LockoutEnd")
                        .HasColumnType("datetimeoffset");

                    b.Property<string>("NomeCompleto")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("NormalizedEmail")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.Property<string>("NormalizedUserName")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.Property<string>("PasswordHash")
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("PelotaoId")
                        .HasColumnType("int");

                    b.Property<string>("PhoneNumber")
                        .HasColumnType("nvarchar(max)");

                    b.Property<bool>("PhoneNumberConfirmed")
                        .HasColumnType("bit");

                    b.Property<string>("SecurityStamp")
                        .HasColumnType("nvarchar(max)");

                    b.Property<bool>("TwoFactorEnabled")
                        .HasColumnType("bit");

                    b.Property<string>("UserName")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.HasKey("Id");

                    b.HasIndex("NormalizedEmail")
                        .HasDatabaseName("EmailIndex");

                    b.HasIndex("NormalizedUserName")
                        .IsUnique()
                        .HasDatabaseName("UserNameIndex")
                        .HasFilter("[NormalizedUserName] IS NOT NULL");

                    b.HasIndex("PelotaoId");

                    b.ToTable("AspNetUsers");
                });

            modelBuilder.Entity("CadeOFogo.Models.Inpe.Batalhao", b =>
                {
                    b.Property<int>("BatalhaoId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("NomeBatalhao")
                        .IsRequired()
                        .HasMaxLength(280)
                        .HasColumnType("nvarchar(280)");

                    b.HasKey("BatalhaoId");

                    b.ToTable("Batalhoes");

                    b.HasData(
                        new
                        {
                            BatalhaoId = 1,
                            NomeBatalhao = "4º Batalhão de Polícia Ambiental"
                        });
                });

            modelBuilder.Entity("CadeOFogo.Models.Inpe.CausaFogo", b =>
                {
                    b.Property<int>("CausaFogoId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("CausaFogoDescricao")
                        .IsRequired()
                        .HasMaxLength(80)
                        .HasColumnType("nvarchar(80)");

                    b.HasKey("CausaFogoId");

                    b.ToTable("CausasFogo");

                    b.HasData(
                        new
                        {
                            CausaFogoId = 1,
                            CausaFogoDescricao = "Desconhecida"
                        },
                        new
                        {
                            CausaFogoId = 2,
                            CausaFogoDescricao = "Queima de Cana"
                        },
                        new
                        {
                            CausaFogoId = 3,
                            CausaFogoDescricao = "Queima para Limpeza"
                        },
                        new
                        {
                            CausaFogoId = 4,
                            CausaFogoDescricao = "Queima de resto de cultura"
                        },
                        new
                        {
                            CausaFogoId = 5,
                            CausaFogoDescricao = "Vandalismo"
                        },
                        new
                        {
                            CausaFogoId = 6,
                            CausaFogoDescricao = "Raio/Causas naturais"
                        },
                        new
                        {
                            CausaFogoId = 7,
                            CausaFogoDescricao = "Descarga elétrica"
                        },
                        new
                        {
                            CausaFogoId = 8,
                            CausaFogoDescricao = "Limpeza de controle fitossanitário"
                        },
                        new
                        {
                            CausaFogoId = 9,
                            CausaFogoDescricao = "Incidente com colheitadeiras"
                        },
                        new
                        {
                            CausaFogoId = 10,
                            CausaFogoDescricao = "Queima Ponto de Apoio"
                        },
                        new
                        {
                            CausaFogoId = 11,
                            CausaFogoDescricao = "Terreno Baldio"
                        });
                });

            modelBuilder.Entity("CadeOFogo.Models.Inpe.CausadorProvavel", b =>
                {
                    b.Property<int>("CausadorProvavelId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("CausadorProvavelDescricacao")
                        .IsRequired()
                        .HasMaxLength(80)
                        .HasColumnType("nvarchar(80)");

                    b.HasKey("CausadorProvavelId");

                    b.ToTable("CausadoresProvaveis");

                    b.HasData(
                        new
                        {
                            CausadorProvavelId = 1,
                            CausadorProvavelDescricacao = "Funcionário"
                        },
                        new
                        {
                            CausadorProvavelId = 2,
                            CausadorProvavelDescricacao = "Proprietário"
                        },
                        new
                        {
                            CausadorProvavelId = 3,
                            CausadorProvavelDescricacao = "Outro Identificado"
                        },
                        new
                        {
                            CausadorProvavelId = 4,
                            CausadorProvavelDescricacao = "Indeterminado"
                        });
                });

            modelBuilder.Entity("CadeOFogo.Models.Inpe.Companhia", b =>
                {
                    b.Property<int>("CompanhiaId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<int>("BatalhaoId")
                        .HasColumnType("int");

                    b.Property<string>("CompanhiaNome")
                        .IsRequired()
                        .HasMaxLength(280)
                        .HasColumnType("nvarchar(280)");

                    b.HasKey("CompanhiaId");

                    b.HasIndex("BatalhaoId");

                    b.ToTable("Companhias");

                    b.HasData(
                        new
                        {
                            CompanhiaId = 1,
                            BatalhaoId = 1,
                            CompanhiaNome = "1º Companhia de São José do Rio Preto"
                        });
                });

            modelBuilder.Entity("CadeOFogo.Models.Inpe.Estado", b =>
                {
                    b.Property<int>("EstadoId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<int>("EstadoIdInpe")
                        .HasColumnType("int");

                    b.Property<string>("EstadoNome")
                        .IsRequired()
                        .HasMaxLength(80)
                        .HasColumnType("nvarchar(80)");

                    b.Property<bool>("Monitorado")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bit")
                        .HasDefaultValue(true);

                    b.Property<DateTime>("UltimoFocoObservadoUtc")
                        .HasColumnType("datetime2");

                    b.HasKey("EstadoId");

                    b.ToTable("Estados");
                });

            modelBuilder.Entity("CadeOFogo.Models.Inpe.Foco", b =>
                {
                    b.Property<int>("FocoId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("ArvoresIsoladas")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("AutoDeInflacaoAmbiental")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("AutoDeInflacaoAmbientalA")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("AutoDeInflacaoAmbientalAPP")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("AutoDeInflacaoAmbientalL")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("AutoDeInflacaoAmbientalRL")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("AutoDeInflacaoAmbientalUC")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("AutoDeInflacaoAmbientalV")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Autorizado")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Avancado")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("AvancadoAPPAreaEmHectares")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("AvancadoRL")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("AvancadoUC")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Bioma")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("CanaDeAcucar")
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("CausaFogoId")
                        .HasColumnType("int");

                    b.Property<int>("CausadorProvavelId")
                        .HasColumnType("int");

                    b.Property<string>("Citrus")
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime>("DataAtendimento")
                        .HasColumnType("datetime2");

                    b.Property<DateTime>("DataSnapshot")
                        .HasPrecision(0)
                        .HasColumnType("datetime2(0)");

                    b.Property<int>("EstadoId")
                        .HasColumnType("int");

                    b.Property<bool>("FocoAtendido")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bit")
                        .HasDefaultValue(false);

                    b.Property<bool>("FocoConfirmado")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bit")
                        .HasDefaultValue(true);

                    b.Property<DateTime>("FocoDataUtc")
                        .HasPrecision(0)
                        .HasColumnType("datetime2(0)");

                    b.Property<decimal>("FocoLatitude")
                        .HasPrecision(13, 8)
                        .HasColumnType("decimal(13,8)");

                    b.Property<decimal>("FocoLongitude")
                        .HasPrecision(13, 8)
                        .HasColumnType("decimal(13,8)");

                    b.Property<int>("IndicioInicioFocoId")
                        .HasColumnType("int");

                    b.Property<string>("Inicial")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("InicialAPPAreaEmHectares")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("InicialRL")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("InicialUC")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("InpeFocoId")
                        .IsRequired()
                        .HasMaxLength(80)
                        .HasColumnType("nvarchar(80)");

                    b.Property<string>("Medio")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("MedioAPPAreaEmHectares")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("MedioRL")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("MedioUC")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("MultaA")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("MultaAPP")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("MultaL")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("MultaR")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("MultaRL")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("MultaUC")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("MultaV")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Municipi")
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("MunicipioId")
                        .HasColumnType("int");

                    b.Property<string>("NºBOPAmb")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("NºTVA")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("OcorrênciaSIOPM")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Outras")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("OutrasRL")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("OutrasUC")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("PalhaDeCana")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Pasto")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Pioneiro")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("PioneiroAPPAreaEmHectares")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("PioneiroRL")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("PioneiroUC")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("PolicialResponsavel")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("RSO")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Refiscalizacao")
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("ResponsavelPropriedadeId")
                        .HasColumnType("int");

                    b.Property<int>("SateliteId")
                        .HasColumnType("int");

                    b.Property<string>("SnapshotProvider")
                        .HasMaxLength(40)
                        .HasColumnType("nvarchar(40)");

                    b.Property<byte[]>("SnapshotSatelite")
                        .HasColumnType("varbinary(max)");

                    b.Property<int>("StatusFocoId")
                        .HasColumnType("int");

                    b.HasKey("FocoId");

                    b.HasAlternateKey("FocoLatitude", "FocoLongitude", "FocoDataUtc", "SateliteId");

                    b.HasIndex("CausaFogoId");

                    b.HasIndex("CausadorProvavelId");

                    b.HasIndex("EstadoId");

                    b.HasIndex("IndicioInicioFocoId");

                    b.HasIndex("MunicipioId");

                    b.HasIndex("ResponsavelPropriedadeId");

                    b.HasIndex("SateliteId");

                    b.HasIndex("StatusFocoId");

                    b.ToTable("Focos");
                });

            modelBuilder.Entity("CadeOFogo.Models.Inpe.IndicioInicioFoco", b =>
                {
                    b.Property<int>("IndicioInicioFocoId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("IndicioInicioFocoDescricao")
                        .IsRequired()
                        .HasMaxLength(80)
                        .HasColumnType("nvarchar(80)");

                    b.HasKey("IndicioInicioFocoId");

                    b.ToTable("IndiciosInicioFoco");

                    b.HasData(
                        new
                        {
                            IndicioInicioFocoId = 1,
                            IndicioInicioFocoDescricao = "Dentro da Propriedade"
                        },
                        new
                        {
                            IndicioInicioFocoId = 2,
                            IndicioInicioFocoDescricao = "Rodovia/Estrada"
                        },
                        new
                        {
                            IndicioInicioFocoId = 3,
                            IndicioInicioFocoDescricao = "Indeterminado"
                        });
                });

            modelBuilder.Entity("CadeOFogo.Models.Inpe.Municipio", b =>
                {
                    b.Property<int>("MunicipioId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<int>("EstadoId")
                        .HasColumnType("int");

                    b.Property<bool>("Monitorado")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bit")
                        .HasDefaultValue(true);

                    b.Property<int>("MunicioIbgeId")
                        .HasColumnType("int");

                    b.Property<string>("MunicipioNome")
                        .IsRequired()
                        .HasMaxLength(80)
                        .HasColumnType("nvarchar(80)");

                    b.Property<DateTime>("UltimoFocoObservadoUtc")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("datetime2")
                        .HasDefaultValue(new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified));

                    b.HasKey("MunicipioId");

                    b.HasAlternateKey("MunicioIbgeId");

                    b.HasIndex("EstadoId");

                    b.ToTable("Municipios");
                });

            modelBuilder.Entity("CadeOFogo.Models.Inpe.Pelotao", b =>
                {
                    b.Property<int>("PelotaoId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<int>("BatalhaoId")
                        .HasColumnType("int");

                    b.Property<int>("CompanhiaId")
                        .HasColumnType("int");

                    b.Property<string>("PelotaoNome")
                        .IsRequired()
                        .HasMaxLength(280)
                        .HasColumnType("nvarchar(280)");

                    b.HasKey("PelotaoId");

                    b.HasIndex("BatalhaoId");

                    b.HasIndex("CompanhiaId");

                    b.ToTable("Pelotoes");

                    b.HasData(
                        new
                        {
                            PelotaoId = 1,
                            BatalhaoId = 1,
                            CompanhiaId = 1,
                            PelotaoNome = "1º Pelotão de São José do Rio Preto"
                        });
                });

            modelBuilder.Entity("CadeOFogo.Models.Inpe.ResponsavelPropriedade", b =>
                {
                    b.Property<int>("ResponsavelPropriedadeId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("ResponsavelPropriedadeDescricao")
                        .IsRequired()
                        .HasMaxLength(80)
                        .HasColumnType("nvarchar(80)");

                    b.HasKey("ResponsavelPropriedadeId");

                    b.ToTable("ResponsaveisPropriedade");

                    b.HasData(
                        new
                        {
                            ResponsavelPropriedadeId = 1,
                            ResponsavelPropriedadeDescricao = "Não Informado no TVA/BO"
                        },
                        new
                        {
                            ResponsavelPropriedadeId = 2,
                            ResponsavelPropriedadeDescricao = "Proprietário Fornecedor"
                        },
                        new
                        {
                            ResponsavelPropriedadeId = 3,
                            ResponsavelPropriedadeDescricao = "Usina Arrendatário/Proprietária"
                        },
                        new
                        {
                            ResponsavelPropriedadeId = 4,
                            ResponsavelPropriedadeDescricao = "Empresa Arrendatário"
                        },
                        new
                        {
                            ResponsavelPropriedadeId = 5,
                            ResponsavelPropriedadeDescricao = "Prefeitura"
                        },
                        new
                        {
                            ResponsavelPropriedadeId = 6,
                            ResponsavelPropriedadeDescricao = "Proprietário (Não Usina)"
                        });
                });

            modelBuilder.Entity("CadeOFogo.Models.Inpe.Satelite", b =>
                {
                    b.Property<int>("SateliteId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<bool>("Monitorado")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bit")
                        .HasDefaultValue(true);

                    b.Property<string>("SateliteNome")
                        .HasMaxLength(80)
                        .HasColumnType("nvarchar(80)");

                    b.Property<string>("SateliteNomeINPE")
                        .IsRequired()
                        .HasMaxLength(15)
                        .HasColumnType("nvarchar(15)");

                    b.Property<DateTime>("UltimoFocoUtc")
                        .HasPrecision(0)
                        .HasColumnType("datetime2(0)");

                    b.HasKey("SateliteId");

                    b.HasIndex("SateliteNomeINPE");

                    b.ToTable("Satelites");
                });

            modelBuilder.Entity("CadeOFogo.Models.Inpe.StatusFoco", b =>
                {
                    b.Property<int>("StatusFocoId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("StatusFocoDescricao")
                        .IsRequired()
                        .HasMaxLength(80)
                        .HasColumnType("nvarchar(80)");

                    b.HasKey("StatusFocoId");

                    b.ToTable("StatusFocos");

                    b.HasData(
                        new
                        {
                            StatusFocoId = 1,
                            StatusFocoDescricao = "Não encontrado"
                        },
                        new
                        {
                            StatusFocoId = 2,
                            StatusFocoDescricao = "Sem nexo causalidade"
                        },
                        new
                        {
                            StatusFocoId = 3,
                            StatusFocoDescricao = "Não autorizado"
                        },
                        new
                        {
                            StatusFocoId = 4,
                            StatusFocoDescricao = "Autorizado"
                        },
                        new
                        {
                            StatusFocoId = 5,
                            StatusFocoDescricao = "Autorizado desacordo"
                        });
                });

            modelBuilder.Entity("CadeOFogo.Models.Inpe.TipoVegetacao", b =>
                {
                    b.Property<int>("TipoVegetacaoId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("TipoVegetacaoDescricao")
                        .IsRequired()
                        .HasMaxLength(80)
                        .HasColumnType("nvarchar(80)");

                    b.HasKey("TipoVegetacaoId");

                    b.ToTable("TiposVegetacao");

                    b.HasData(
                        new
                        {
                            TipoVegetacaoId = 1,
                            TipoVegetacaoDescricao = "Vegetação pioneira ou demais formas de vegetação natural"
                        },
                        new
                        {
                            TipoVegetacaoId = 2,
                            TipoVegetacaoDescricao = "Vegetação nativa secundária em estágio inicial de regeneração"
                        },
                        new
                        {
                            TipoVegetacaoId = 3,
                            TipoVegetacaoDescricao = "Vegetação nativa secundária em estágio médio de regeneração"
                        },
                        new
                        {
                            TipoVegetacaoId = 4,
                            TipoVegetacaoDescricao = "Vegetação nativa secundária em estágio avançado de regeneração"
                        },
                        new
                        {
                            TipoVegetacaoId = 5,
                            TipoVegetacaoDescricao = "Vegetação nativa primária"
                        },
                        new
                        {
                            TipoVegetacaoId = 6,
                            TipoVegetacaoDescricao = "Vegetação exótica"
                        });
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityRole", b =>
                {
                    b.Property<string>("Id")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("ConcurrencyStamp")
                        .IsConcurrencyToken()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Name")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.Property<string>("NormalizedName")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.HasKey("Id");

                    b.HasIndex("NormalizedName")
                        .IsUnique()
                        .HasDatabaseName("RoleNameIndex")
                        .HasFilter("[NormalizedName] IS NOT NULL");

                    b.ToTable("AspNetRoles");
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityRoleClaim<string>", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("ClaimType")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("ClaimValue")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("RoleId")
                        .IsRequired()
                        .HasColumnType("nvarchar(450)");

                    b.HasKey("Id");

                    b.HasIndex("RoleId");

                    b.ToTable("AspNetRoleClaims");
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserClaim<string>", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("ClaimType")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("ClaimValue")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("UserId")
                        .IsRequired()
                        .HasColumnType("nvarchar(450)");

                    b.HasKey("Id");

                    b.HasIndex("UserId");

                    b.ToTable("AspNetUserClaims");
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserLogin<string>", b =>
                {
                    b.Property<string>("LoginProvider")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("ProviderKey")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("ProviderDisplayName")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("UserId")
                        .IsRequired()
                        .HasColumnType("nvarchar(450)");

                    b.HasKey("LoginProvider", "ProviderKey");

                    b.HasIndex("UserId");

                    b.ToTable("AspNetUserLogins");
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserRole<string>", b =>
                {
                    b.Property<string>("UserId")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("RoleId")
                        .HasColumnType("nvarchar(450)");

                    b.HasKey("UserId", "RoleId");

                    b.HasIndex("RoleId");

                    b.ToTable("AspNetUserRoles");
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserToken<string>", b =>
                {
                    b.Property<string>("UserId")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("LoginProvider")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("Name")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("Value")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("UserId", "LoginProvider", "Name");

                    b.ToTable("AspNetUserTokens");
                });

            modelBuilder.Entity("CadeOFogo.Areas.Cadastros.Models.Equipe", b =>
                {
                    b.HasOne("CadeOFogo.Models.Inpe.ApplicationUser", "ApplicationUser")
                        .WithMany()
                        .HasForeignKey("ApplicationUserId");

                    b.HasOne("CadeOFogo.Models.Inpe.Batalhao", "Batalhao")
                        .WithMany("EquipeCollection")
                        .HasForeignKey("BatalhaoId")
                        .OnDelete(DeleteBehavior.NoAction)
                        .IsRequired();

                    b.HasOne("CadeOFogo.Models.Inpe.Companhia", "Companhia")
                        .WithMany("EquipeCollection")
                        .HasForeignKey("CompanhiaId")
                        .OnDelete(DeleteBehavior.NoAction)
                        .IsRequired();

                    b.HasOne("CadeOFogo.Models.Inpe.Pelotao", "Pelotao")
                        .WithMany("EquipeCollection")
                        .HasForeignKey("PelotaoId")
                        .OnDelete(DeleteBehavior.NoAction)
                        .IsRequired();

                    b.Navigation("ApplicationUser");

                    b.Navigation("Batalhao");

                    b.Navigation("Companhia");

                    b.Navigation("Pelotao");
                });

            modelBuilder.Entity("CadeOFogo.Models.Inpe.ApplicationUser", b =>
                {
                    b.HasOne("CadeOFogo.Models.Inpe.Pelotao", "Pelotao")
                        .WithMany("Usuarios")
                        .HasForeignKey("PelotaoId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Pelotao");
                });

            modelBuilder.Entity("CadeOFogo.Models.Inpe.Companhia", b =>
                {
                    b.HasOne("CadeOFogo.Models.Inpe.Batalhao", "Batalhao")
                        .WithMany("CompanhiaCollection")
                        .HasForeignKey("BatalhaoId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Batalhao");
                });

            modelBuilder.Entity("CadeOFogo.Models.Inpe.Foco", b =>
                {
                    b.HasOne("CadeOFogo.Models.Inpe.CausaFogo", "CausaFogo")
                        .WithMany("FocoCollection")
                        .HasForeignKey("CausaFogoId")
                        .OnDelete(DeleteBehavior.NoAction)
                        .IsRequired();

                    b.HasOne("CadeOFogo.Models.Inpe.CausadorProvavel", "CausadorProvavel")
                        .WithMany("FocoCollection")
                        .HasForeignKey("CausadorProvavelId")
                        .OnDelete(DeleteBehavior.NoAction)
                        .IsRequired();

                    b.HasOne("CadeOFogo.Models.Inpe.Estado", "Estado")
                        .WithMany("ListaDeFocos")
                        .HasForeignKey("EstadoId")
                        .OnDelete(DeleteBehavior.NoAction)
                        .IsRequired();

                    b.HasOne("CadeOFogo.Models.Inpe.IndicioInicioFoco", "IndicioInicioFoco")
                        .WithMany("FocoCollection")
                        .HasForeignKey("IndicioInicioFocoId")
                        .OnDelete(DeleteBehavior.NoAction)
                        .IsRequired();

                    b.HasOne("CadeOFogo.Models.Inpe.Municipio", "Municipio")
                        .WithMany("ListaDeFocos")
                        .HasForeignKey("MunicipioId")
                        .OnDelete(DeleteBehavior.NoAction)
                        .IsRequired();

                    b.HasOne("CadeOFogo.Models.Inpe.ResponsavelPropriedade", "ResponsavelPropriedade")
                        .WithMany("FocoCollection")
                        .HasForeignKey("ResponsavelPropriedadeId")
                        .OnDelete(DeleteBehavior.NoAction)
                        .IsRequired();

                    b.HasOne("CadeOFogo.Models.Inpe.Satelite", "Satelite")
                        .WithMany("FocosCollection")
                        .HasForeignKey("SateliteId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("CadeOFogo.Models.Inpe.StatusFoco", "StatusDoFoco")
                        .WithMany("FocoCollection")
                        .HasForeignKey("StatusFocoId")
                        .OnDelete(DeleteBehavior.NoAction)
                        .IsRequired();

                    b.Navigation("CausadorProvavel");

                    b.Navigation("CausaFogo");

                    b.Navigation("Estado");

                    b.Navigation("IndicioInicioFoco");

                    b.Navigation("Municipio");

                    b.Navigation("ResponsavelPropriedade");

                    b.Navigation("Satelite");

                    b.Navigation("StatusDoFoco");
                });

            modelBuilder.Entity("CadeOFogo.Models.Inpe.Municipio", b =>
                {
                    b.HasOne("CadeOFogo.Models.Inpe.Estado", "Estado")
                        .WithMany("MunicipiosCollection")
                        .HasForeignKey("EstadoId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Estado");
                });

            modelBuilder.Entity("CadeOFogo.Models.Inpe.Pelotao", b =>
                {
                    b.HasOne("CadeOFogo.Models.Inpe.Batalhao", "Batalhao")
                        .WithMany("PelotaoCollection")
                        .HasForeignKey("BatalhaoId")
                        .OnDelete(DeleteBehavior.NoAction)
                        .IsRequired();

                    b.HasOne("CadeOFogo.Models.Inpe.Companhia", "Companhia")
                        .WithMany("PelotaoCollection")
                        .HasForeignKey("CompanhiaId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Batalhao");

                    b.Navigation("Companhia");
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityRoleClaim<string>", b =>
                {
                    b.HasOne("Microsoft.AspNetCore.Identity.IdentityRole", null)
                        .WithMany()
                        .HasForeignKey("RoleId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserClaim<string>", b =>
                {
                    b.HasOne("CadeOFogo.Models.Inpe.ApplicationUser", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserLogin<string>", b =>
                {
                    b.HasOne("CadeOFogo.Models.Inpe.ApplicationUser", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserRole<string>", b =>
                {
                    b.HasOne("Microsoft.AspNetCore.Identity.IdentityRole", null)
                        .WithMany()
                        .HasForeignKey("RoleId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("CadeOFogo.Models.Inpe.ApplicationUser", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserToken<string>", b =>
                {
                    b.HasOne("CadeOFogo.Models.Inpe.ApplicationUser", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("CadeOFogo.Models.Inpe.Batalhao", b =>
                {
                    b.Navigation("CompanhiaCollection");

                    b.Navigation("EquipeCollection");

                    b.Navigation("PelotaoCollection");
                });

            modelBuilder.Entity("CadeOFogo.Models.Inpe.CausaFogo", b =>
                {
                    b.Navigation("FocoCollection");
                });

            modelBuilder.Entity("CadeOFogo.Models.Inpe.CausadorProvavel", b =>
                {
                    b.Navigation("FocoCollection");
                });

            modelBuilder.Entity("CadeOFogo.Models.Inpe.Companhia", b =>
                {
                    b.Navigation("EquipeCollection");

                    b.Navigation("PelotaoCollection");
                });

            modelBuilder.Entity("CadeOFogo.Models.Inpe.Estado", b =>
                {
                    b.Navigation("ListaDeFocos");

                    b.Navigation("MunicipiosCollection");
                });

            modelBuilder.Entity("CadeOFogo.Models.Inpe.IndicioInicioFoco", b =>
                {
                    b.Navigation("FocoCollection");
                });

            modelBuilder.Entity("CadeOFogo.Models.Inpe.Municipio", b =>
                {
                    b.Navigation("ListaDeFocos");
                });

            modelBuilder.Entity("CadeOFogo.Models.Inpe.Pelotao", b =>
                {
                    b.Navigation("EquipeCollection");

                    b.Navigation("Usuarios");
                });

            modelBuilder.Entity("CadeOFogo.Models.Inpe.ResponsavelPropriedade", b =>
                {
                    b.Navigation("FocoCollection");
                });

            modelBuilder.Entity("CadeOFogo.Models.Inpe.Satelite", b =>
                {
                    b.Navigation("FocosCollection");
                });

            modelBuilder.Entity("CadeOFogo.Models.Inpe.StatusFoco", b =>
                {
                    b.Navigation("FocoCollection");
                });
#pragma warning restore 612, 618
        }
    }
}
